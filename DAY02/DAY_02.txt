前情回顾

1. osi七层模型是什么？
答：OSI七层模型是我们进行网络通信过程中的一个标准化流程，它有：应用层,表示层,会话层,传输层,网络层,链路层.物理层．在实际应用过程中，我们将其
　　分为五层（TCP/IP模型）,应用层 (应用层，表示层，会话层),传输层,网络层,链路层,物理层.
2. 三次握手和四次挥手？
答：首先要回答三次握手和四次挥手是什么：在TCP连接过程中，因为我们是要建立有连接的传输服务，我们需要三次握手和四次挥手来进行连接的建立和连接的断开，
　　以保证传输的可靠性．然后在回答三次握手和四次挥手是什么．　　通过这样一个机制保证了传输的可靠性和有效性．

　　　    三次握手 ： tcp传输在数据传输前建立连接的过程
            1. 客户端向服务器发送连接请求
            2. 服务器收到请求后，恢复确认消息，表示允许连接
            3. 客户端收到服务器恢复，进行最终标志发送确认连接

          四次挥手 ： tcp传输在连接断开前进行断开确认的过程
            1. 主动发发送报文告知被动方要断开连接
            2. 被动方收到请求后立即返回报文告知已经准备断开
            3. 被动方准备就绪后再次发送报文告知可以断开
            4. 主动方发送消息，确认最终断开
3. tcp和udp区别

网络概念 ： 主机    端口     IP   域名

套接字 ： 网络编程方式
流式套接字：tcp
数据报套接字： udp

tcp服务端流程
socket() ---> bind() ---> listen() ---> accept()--->
recv/send ---> close()
客户端
socket() ---> connect() ---> send/recv --->close()

*****************************************************

套接字传输注意事项
1. 监听套接字存在客户端即可发起连接，但是最终连接的处理需要accept进行处理
2. 如果连接的另外一段退出，则recv会立即返回空子串不再阻塞。
3. 当连接的另一端退出时，再试图send发送就会产生BrokenPipeError


网络收发缓冲区

缓冲区作用 ：协调收发（处理）速度
              减少交互次数

send和recv实际上是和缓冲区进行交互，发送缓冲区满时就无法发送，接收缓冲区满时recv才阻塞


TCP粘包

产生原因：
tcp套接字以字节流方式传输，没有消息边界
发送和接收并不能保证每次发送都及时的被接收

影响：如果每次发送内容表达一个独立的含义此时可能需要处理粘包防止产生歧义

处理方法：
1. 每次发送的消息添加结尾标志 （人为增加消息边界）
2. 发送数据结构体
3. 协调收发速度，每次发送后都预留接收时间


基于udp套接字的服务端

1. 创建数据报套接字
sockfd = socket(AF_INET,SOCK_DGRAM)

2. 绑定地址
sockfd.bind(addr)

3. 消息的收发

data,addr = sockfd.recvfrom(buffersize)
功能 : 接收UDP消息
参数 ： 每次最多接收多大的消息
返回值：data   接收到的数据
        addr   消息发送端的地址

* 一次接收一个数据报，如果数据报大小大于buffersize则会丢失部分消息

sockfd.sendto(data,addr)
功能 ： 发送udp消息
参数 ： data  发送的消息  bytes格式
        addr  目标地址
返回值： 发送的字节数

4. 关闭套接字
sockfd.close()

udp客户端
1. 创建套接字 
   socket(AF_INET,SOCK_DGRAM)
2. 消息收发
   recvfrom/sendto
3. 关闭套接字
   close（）

cookie

1. sys.argv 属性
功能 ： 获取命令行参数，得到一个列表

命令本身是 argv[0]
后面的参数从argv[1]开始，默认以空格分隔
使用引号引起来的内容算作一个整体
命令行参数都以字符串放入列表

2. 
在程序的第一行加
#!/usr/bin/env python3
添加程序的执行权限
chmod  755  file.py
修改后即可通过 ./file.py  运行程序

tcp套接字编程和udp套接字编程区别
1. 流式套接字使用字节流的方式传输，数据报套接字以数据报形式传输数据
2. tcp会有粘包现象，udp有消息边界不会形成粘包
3. tcp 可以保障数据传输完整性，udp则不保证
4. tcp 需要进行listen accept 操作，udp不需要
5. tcp收发消息使用新的套接字，recv send。udp使用recvfrom，sendto

补充函数
sendall(data)
功能 ： 发送tcp消息
参数 ： 要发送的内容，bytes格式
返回值 ： 成功返回 None 失败产生异常

套接字对象 

s代表一个套接字

s.family  : 获取套接字地址族类型
s.type : 获取套接字类型
s.getsockname() : 获取套接字的绑定地址

s.fileno() : 获取套接字的文件描述符
文件描述符 ： 每一个IO事件操作系统都会分配一个不同的正整数作为编号，改正整数即为这个IO的文件描述符。

* 文件描述符是操作系统识别IO的唯一标志
stdin ---> 0
stdout --> 1
stderr --> 2

s.getpeername() : 获取客户端连接套接字的对应地址

s.setsockopt(level,option,value)
功能：设置套接字选项，丰富或者修改套接字属性功能
参数： level 选项类别   SOL_SOCKET
       option 具体选项
       value  选项值
例子：s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)  作用：设置端口立即释放
图片：setsockopt.png
程序:sock_attr.py
s.getsockopt(level,option)
功能：获取套接字选项值
参数： level 选项类别   SOL_SOCKET
       option 具体选项
返回值：选项值

* 如果要设置套接字选项，最好在创建套接字之后立即设置


udp 应用之广播

广播 ： 一点发送，多点接收

广播地址 ： 一个网段内有一个指定的广播地址，是该网段的最大地址。  172.17.255.255

广播风暴 ： 一个网络中有大量的广播就会产生广播风暴占用大量带宽，影响正常的访问速度。
cookie:format的使用
                 1) s= "{} is a {}".format("Tom",'boy')  #'Tom is a boy'
                 2) s= "{1} is a {0}".format("Tom",'boy')  #'boy is a Tom'
                 3) s= "{name} is a {sex}".format(name="Tom",sex='boy')  #'Tom is a boy'

tcp应用之http传输

http协议 ： 超文本传输协议，是一个应用层协议

用途 ： 网页数据的传输
        数据传输方法
图片解释：http.png
特点 ： 
1. 应用层协议，传输层使用tcp服务
2. 简单，灵活，多种语言都有http相关操作接口
3. 无状态的协议，即不记录用户传输的信息
4. http1.1  支持持久连接

一端通过http请求的格式发送具体请求内容，另一端接收http请求，按照协议格式解析。获取真实请求后按照http协议响应格式组织回复内容，回发给请求方，完成一次数据交互。

http请求 （request）
html格式：<h1>welcome to tedu</h1>
请求格式：

1)请求行  ： 具体的请求类别和请求内容
    格式：  GET       /         HTTP/1.1
          请求类别  请求内容    协议版本
    请求类别 ： 表示请求的种类
        GET      获取网络资源
	    POST     提交一定的附加信息，得到返回结果
	    HEAD     获取响应头
	    PUT      更新服务器资源
	    DELETE   删除服务器资源
        CONNECT  
	    TRACE    用于测试
	    OPTIONS  获取服务器性能信息

2)请求头 ： 对请求内容的具体描述信息
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: max-age=0
Connection: keep-alive

3)空行
4)请求体 ： 请求参数或者是提交内容


http响应 （response）

响应格式

1)响应行  ： 反馈响应的情况
    格式 ： HTTP/1.1    200     OK
            协议版本   响应码  附加信息
    响应码 ： 响应的具体情况
              1xx ： 提示信息，表示请求成功
	      2xx ： 响应成功
	      3xx ： 响应需要重定向
	      4xx ： 客户端错误
	      5xx ： 服务端错误
    常见响应码 ： 200  成功
                  404  请求内容不存在
		  401  没有访问权限
		  500  服务器发生未知错误
		  503  暂时无法执行

2)响应头 ： 对响应内容的具体描述
Connection: keep-alive
Content-Encoding: gzip
Content-Type: text/html
Date: Thu, 06 Sep 2018 09:11:18 GMT

3)空行
4)响应体 ： 返回给请求端的具体内容

要求：
    1. 什么是http协议
    2. 请求的格式和每一部分的功能
    3. 响应的格式和每一部分功能
    4. 常见的请求类型和响应码代表什么

作业 ： 通过tcp套接字完成一个文件的发送
        将一个文件从客户端发送给服务端，或者从服务端发送给客户端均可。
	文件可以是文本，也可以是图片

